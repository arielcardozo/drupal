<?php

global $user;
/**
* @file
* Menu Forcontu
* Forcontu - Ejemplos de formulario
*/


/**
* Implements hook_menu().
*/
function forms_forcontu_menu() {

	$items['formulario/oferta'] = array(
	'title' => t('Offers form for authenticated users'),
	'page callback' => 'drupal_get_form',
	'page arguments' => array('offers_form'),
	'access callback' => 'user_access',
	'access arguments' => array('make an offer'),
	//'access callback' => 'forms_forcontu_view_access',
	'description' => t('Offers Form'),
	'type' => MENU_LOCAL_TASK,

	);

	$items['admin/config/workflow/ofertas_formulario'] = array(
		'title' => 'Node Offers Form settings',
		'description' => 'Settings for module Offers form ',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('offers_form_admin_settings'),
		'access arguments' => array('administer site configuration'),
		'type' => MENU_NORMAL_ITEM,
		'file' => 'forms_forcontu.admin.inc',
	);

	$items['admin/structure/type/instrumentos'] = array(
		'title' => 'Instruments Management',
		'description' => 'Settings the Instrument table content ',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('instruments_form_admin_settings'),
		'access arguments' => array('administer content types'),
		'type' => MENU_NORMAL_ITEM,
		'file' => 'forms_forcontu_instrumentos.admin.inc',
	);

	$items['ofertas/%/user/%user/detalle'] = array(
		'title' => t('Detalle de la oferta'),
		'access callback' => 'user_access',
		'access arguments' => array('make an offer'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('forms_ofertas_detalle',1),
	);
	$items['ofertas/%/user/%user/detalle/view'] = array(
		'title' => 'View offer',
		'type' => MENU_DEFAULT_LOCAL_TASK,
		'weight' => 1,
	);


	$items['ofertas/%/user/%user/detalle/edit'] = array(
		'title' => t('Edit offer'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('forms_ofertas_detalle_edit',1),
		'access callback' => 'user_edit_access',
		//'access callback' => 'ofertas_edit_access',
		'access arguments' => array(3),
		'description' => t('Offer edit'),
		'type' => MENU_LOCAL_TASK,
		'weight' => 2,

	);
	$items['ofertas/ver/detalle/confirm'] = array(
		'title' => t('Confirmación de la suscripción'),
		'type' => MENU_CALLBACK,
		'access callback' => TRUE,
		'page callback' => 'drupal_get_form',
		'page arguments' => array('forms_ofertas_detalle_confirm'),
	);

	$items['ofertas/edit/detalle/confirm'] = array(
		'title' => t('Confirmación de actualización'),
		'type' => MENU_CALLBACK,
		'access callback' => TRUE,
		'page callback' => 'drupal_get_form',
		'page arguments' => array('forms_ofertas_detalle_edit_confirm'),
	);
	//Pestañas para el listado
	$items['listado'] = array(
	'title' => t('Listado de ofertas'),
		//'page callback' => 'drupal_get_form',
		'page callback' => 'forms_ofertas_listado',
		'page arguments' => array('forms_ofertas_listado'),
		'access callback' => TRUE,
		'description' => t('Listado de ofertas'),
		'type' => MENU_CALLBACK,
	);
	
	$items['actividades/%'] = array(
		'title' => t('Listado de Actividades'),
		'page callback' => 'forms_ofertas_listado_ofertas_usuario',
		'page arguments' => array(1),
		//'access callback' => 'user_access',
		'access callback' => TRUE,
		//'access arguments' => array('view offers'),
		//'access arguments' => array(0),
		'description' => t('Listado de ofertas hechas'),
		'type' => MENU_CALLBACK,
		
	);
	$items['actividades/%/ofertas_hechas'] = array(
	'title' => 'Todas las ofertas',
	'type' => MENU_DEFAULT_LOCAL_TASK,
	'weight' => 1,
	);
	$items['actividades/%/suscripciones_usuario'] = array(
		'title' => t('Listado de suscripciones'),
		'page callback' => 'forms_ofertas_listado_suscripciones_usuario',
		'page arguments' => array(1),
		'access callback' => TRUE,
		//'access callback' => 'user_access',
		//'access arguments' => array('view offers'),
		//'access arguments' => array(0),
		'description' => t('Listado de ofertas hechas'),
		'type' => MENU_LOCAL_TASK,
		'weight' => 2,
	);

return $items;
}
//Permisos a los elementos de menú
/**
* Implements hook_permission.
*/
function forms_forcontu_permission(){
	//dpm('hola');
	return array(
		'make an offer' => array(
		'title' => t('Access to offers module'),
		'description' => t('Access to offers module.'),
		),
		'view offers' => array(
		'title' => t('View offers made'),
		'description' => t('View offers made.'),
		),
		'update offers' => array(
		'title' => t('Update registered offers'),
		'description' => t('Update registered offers, only the owners.'),
		),
	);
}

/**
 * Implements hook_node_access().
 *
 * Allows view and edit access to private nodes, when the account requesting
 * access has the username 'foobar'.
 *
 * hook_node_access() was introduced in Drupal 7. We use it here to demonstrate
 * allowing certain privileges to an arbitrary user.
 *
 * @see hook_node_access()
 */
function forms_forcontu_node_access($node, $op, $account) {
 // If $node is a string, the node has not yet been created. We don't care
  // about that case.
	
	
	 $account = isset($account) ? $account : $GLOBALS['user'];
  if (is_string($node)) {
    return NODE_ACCESS_DENY;
  }
  if (($op == 'view' || $op == 'update') && (!empty($account->name) && $account->name == 'foobar') && !empty($node->private)) {
    drupal_set_message(t('Access to node @nid allowed because requester name (@name) is specifically allowed', array('@name' => $node->name, '@uid' => $account->uid)));
    return NODE_ACCESS_ALLOW;
  }
  return NODE_ACCESS_ALLOW;
}

/**
 * Loads a user object.
 *
 * Drupal has a global $user object, which represents the currently-logged-in
 * user. So to avoid confusion and to avoid clobbering the global $user object,
 * it is a good idea to assign the result of this function to a different local
 * variable, generally $account. If you actually do want to act as the user you
 * are loading, it is essential to call drupal_save_session(FALSE); first.
 * See
 * @link http://drupal.org/node/218104 Safely impersonating another user @endlink
 * for more information.
 *
 * @param $uid
 *   Integer specifying the user ID to load.
 * @param $reset
 *   TRUE to reset the internal cache and load from the database; FALSE
 *   (default) to load from the internal cache, if set.
 *
 * @return
 *   A fully-loaded user object upon successful user load, or FALSE if the user
 *   cannot be loaded.
 *
 * @see user_load_multiple()
 */
function forms_forcontu_load($uid, $reset = FALSE) {
	
  $users = user_load_multiple(array($uid), array(), $reset);
  return reset($users);
}

function obtiene_instrumentos(){
	$query = db_select('instruments', 'n');
	// Obtiene los datos de la base de datos (tabla node).
	$instruments = $query->
		fields('n',array('nid_instrument','name_instrument'))
		->condition('general_list', 1,'=')->execute();
	$options = array();
	foreach ($instruments as $result) {
    	$options[$result->nid_instrument] = $result->name_instrument;
	}
	return $options;
}
/**
* Función de retorno para la página ofertas/formulario.
*/
function offers_form($form_state) {
	

	$options = obtiene_instrumentos();
	$form['description'] = array(
	'#type' => 'item',
	'#title' => t('Registra tu oferta'),
	);
	$form['to_play'] = array(
	'#type' => 'fieldset',
	'#title' => t('What do you want to play?'),
	'#collapsible' => TRUE,
	'#collapsed' => FALSE,
	);
	$form['to_play']['musical_piece'] = array(
	'#type' => 'textfield',
	'#title' => t('Musical piece'),
	'#required' => TRUE,
	'#default_value' => "",
	//'#description' => "Write the musical piece",
	'#size' => 75,
	'#maxlength' => 75,
	);
	$form['to_play']['author'] = array(
	'#type' => 'textfield',
	'#title' => t('Author'),
	'#required' => TRUE,
	'#default_value' => "",
	//'#description' => "Write the author",
	'#size' => 75,
	'#maxlength' => 75,
	);

//Músicos
	$form['performers'] = array(
	'#type' => 'fieldset',
	'#title' => t('How many performers do you need?'),
	'#collapsible' => TRUE,
	'#collapsed' => FALSE,
	);


	//botones
	$form['actions'] = array('#type' => 'actions');
	$form['actions']['submit'] = array(
	'#type' => 'submit',
	'#value' => t('Save'),
	);
	/*$form['actions']['cancel'] = array(
	'#type' => 'button',
	'#value' => t('Cancel'),
	);*/
	$form['actions']['cancel'] = array(
	'#markup' => l(t('Cancel'), ''),
	);

	$form['salon'] = array(
		'#type' => 'checkbox',
		'#title' => t('<strong>Do you need a rehearsal?</strong>'),

	);

	$form['piano'] = array(
		'#type' => 'checkbox',
		'#title' => t('<strong>Do you need piano?</strong>'),
		//'#options' => array( '1' => t('<strong>Do you need piano?</strong>')),
		// Only show this field if persons is set to 'Other'.
	    '#states' => array(
	      'visible' => array(  // Action to take: Make visible.
	        ':input[name="salon"]' => array('checked' => TRUE),
	      ),
    ),

	//),
	//'#description' => t('Select if you need piano.'),
	);


	$form['city'] = array(
		'#type' => 'textfield',
		'#title' => t('City'),
		'#required' => TRUE,
		'#default_value' => "",
		//'#description' => "Write where do you want to play.",
		'#size' => 40,
		'#maxlength' => 40,
	);


	$form['time_availability'] = array(
		'#type' => 'textfield',
		'#title' => t('Time availability'),
		'#default_value' => "",
		'#size' => 40,
		'#maxlength' => 40,
		
	);
	
	// Construye el encabezado de la tabla (#header).
	$header = array(
	'name' => array('data' => t('Instrument'), 'field' => 'n.name_instrument'),
	'description' => array('data' => t('Description'), 'field' => 'n.description_instrument'),
	);

	
		
	//Construye el elemento de formulario select.
	$form['uid_usuario'] = array(
		'#type' => 'hidden',
		'#value' => $GLOBALS["user"]->uid,

	);
	

	$form['to_play']['autor_instrumet'] = array(
		'#type' => 'select',
		'#title' => t('Instrument to play by the author'),
		'#required' => TRUE,
		'#options' => $options,
            '#empty' => t('No content available.'),
	);		
	$form['to_play']['other_autor_instrument'] = array(
		    '#type' => 'textfield',
		    '#size' => 50,
		    '#title' => t('Please enter the instrument.'),

		    // Only show this field if persons is set to 'Other'.
		    '#states' => array(
		      'visible' => array(  // Action to take: Make visible.
		        ':input[name="autor_instrumet"]' => array('value' => '3'),
		      ),
		    ),
  		);
 
    $no_of_fields = 4;     // The number of fields you wish to have in the form

    // Start adding the fields to the form
    for ($i=1; $i<=$no_of_fields; $i++)
    {
        $form['performers']['performers'.$i] = array(
            '#title' => t('Instrument no. '.$i),
            '#type' => 'select',
            '#options' => $options,
            '#empty' => t('No content available.'),
            
        ); 
        $form['performers']['other_permformers'.$i] = array(
		    '#type' => 'textfield',
		    '#size' => 50,
		    '#title' => t('Please enter the instrument.'),

		    // Only show this field if persons is set to 'Other'.
		    '#states' => array(
		      'visible' => array(  // Action to take: Make visible.
		        ':input[name="performers'.$i.'"]' => array('value' => '3'),
		      ),
		    ),
  		);

    }

    $form['performers']['more']= array(
		'#type' => 'checkbox',
		'#title' => t('More Instruments'),
		//'#options' => array( '1' => t('<strong>Do you need piano?</strong>')),
		// Only show this field if persons is set to 'Other'.
	    
	    );
/*
 	$form['performers']['more_instruments'] = array(
    '#type' => 'checkbox',
    '#options' => drupal_map_assoc(array(t('More instrument/s'))),
    '#title' => t('More instruments'),
 	 );
  	/*$form['performers']['more_instruments'] = array(
    '#type' => 'textfield',
    '#size' => 75,
    '#title' => t('Please enter the instrument\'s name wich are needs separated by "|".'),

	    // Only show this field if persons is set to 'Other'.
	    '#states' => array(
	      'visible' => array(  // Action to take: Make visible.
	        ':input[name="persons[More instrument/s]"]' => array('checked' => TRUE),
	      ),
    ),
  );
*/
	$form['performers']['more_performes'] = array(
	'#type' => 'fieldset',
	'#title' => t('More Instruments'),
	'#collapsible' => TRUE,
	'#collapsed' => FALSE,
	    // Expand the expand_more_info fieldset if the box is checked.
    '#states' => array(
      'visible' => array(
        ':input[name="more"]' => array('checked' => TRUE),
      ),
    ),
	);

	$no_of_fields = 9;     // The number of fields you wish to have in the form

    // Start adding the fields to the form
    for ($i=5; $i<=$no_of_fields; $i++)
    {
        $form['performers']['more_performes']['performers'.$i] = array(
            '#title' => t('Instrument no. '.$i),
            '#type' => 'select',
            '#options' => $options,
            '#empty' => t('No content available.'),
            
        ); 
        $form['performers']['more_performes']['other_permformers'.$i] = array(
		    '#type' => 'textfield',
		    '#size' => 50,
		    '#title' => t('Please enter the instrument.'),

		    // Only show this field if persons is set to 'Other'.
		    '#states' => array(
		      'visible' => array(  // Action to take: Make visible.
		        ':input[name="performers'.$i.'"]' => array('value' => '16'),
		      ),
		    ),
  		);

    }



return $form;
}


/**
* Función de envío del formulario offers_form
*/
function offers_form_submit($form, &$form_state){
	// Función de inserción de datos

	 $no_of_fields = 4;     // The number of fields you wish to have in the form
 	$transaction = db_transaction();
    $db = new DbOffer();
    
   	$id_new_instrument = 0;
 	 try {
 	 	$id_oferta = $db->add($form_state['values']['uid_usuario'], 
 	 				$form_state['values']['author'],
 	 				$form_state['values']['musical_piece'],
 	 				time(),
 	 				$form_state['values']['salon'],
 	 				$form_state['values']['piano'],
 	 				$form_state['values']['city'],
 	 				$form_state['values']['time_availability'],
 	 				1);
			
			watchdog('oferta', $id_oferta);
			$dbInstrument = new DbInstrument();
		if(isset($form_state['values']['autor_instrumet'])){
			$dbOfferInstrument = new DbOfferInstrument();
			if($form_state['values']['autor_instrumet']==3){
				$id_new_instrument_autor = $dbInstrument->add($form_state['values']['other_autor_instrument'], 
                         								'Instrumento propio de oferta: '.$id_oferta,
                         								0);
				$dbOfferInstrument->add($user->uid,$id_oferta, $id_new_instrument_autor,0);

			}
			else{
				$dbOfferInstrument->add(0,$id_oferta, $form_state['values']['autor_instrumet'],0);
			}

		}

				//Alta de la opción del propietario de la oferta
			 	for ($i=1; $i<=$no_of_fields; $i++){
			        if($form_state['values']['performers'.$i]!=0 && $form_state['values']['performers'.$i]!=3){
			        	$result = db_insert('pym_instrumentos_ofertas')
							->fields(array(
							'nid_instrument' => $form_state['values']['performers'.$i],
							'nid_oferta' => $id_oferta,
							'uid'=>0,
							'position'=>$i,
							))
							->execute();
							
			        }
			        if($form_state['values']['performers'.$i]==3){
			        	
			        	$id_new_instrument = $db->add($form_state['values']['other_permformers'.$i], 
                         								'Instrumento propio de oferta: '.$id_oferta,
                         								0);

			        	$result = db_insert('pym_instrumentos_ofertas')
							->fields(array(
							'nid_instrument' => $id_new_instrument,
							'nid_oferta' => $id_oferta,
							'uid'=>0,
							'position'=>$i,
							))
							->execute();
			        }

		    
		    	}
				offers_form_mail_send($id_oferta,$form_state['values'],'new_offer');

				drupal_set_message ("<strong>Su oferta ha sido registrada correctamente.</strong> ");
		    }
		    catch (Exception $e) {
			   $transaction->rollback();
			    watchdog_exception('my_type', $e);
			    drupal_set_message ("<strong>Hubo un problema en el registro de su oferta, por favor inténtelo más tarde.</br>".$e->getMessage()."</strong> ");
			}
		
		drupal_goto("");
}


/* ENVIO DEL FORMULARIO AL USUARIO CREADOR DE LA OFERTA ****/

/**
 * Implement hook_mail().
 *
 * This hook defines a list of possible e-mail templates that this module can
 * send. Each e-mail is given a unique identifier, or 'key'.
 *
 * $message comes in with some standard properties already set: 'to' address,
 * 'from' address, and a set of default 'headers' from drupal_mail(). The goal
 * of hook_mail() is to set the message's 'subject' and 'body' properties, as
 * well as make any adjustments to the headers that are necessary.
 *
 * The $params argument is an array which can hold any additional data required
 * to build the mail subject and body; for example, user-entered form data, or
 * some context information as to where the mail request came from.
 *
 * Note that hook_mail() is not actually a hook. It is only called for a single
 * module, the module named in the first argument of drupal_mail(). So it's
 * a callback of a type, but not a hook.
 */
function forms_forcontu_mail($key, &$message, $params) {
  global $user;

  // Each message is associated with a language, which may or may not be the
  // current user's selected language, depending on the type of e-mail being
  // sent. This $options array is used later in the t() calls for subject
  // and body to ensure the proper translation takes effect.
  $options = array(
    'langcode' => $message['language']->language,
  );

  switch ($key) {
    // Se crea una nueva oferta
    case 'offer_owner':
      $message['subject'] = t('Registro de oferta enviado por @site-name', array('@site-name' => variable_get('site_name', 'Drupal')), $options);
      // Note that the message body is an array, not a string.
      $message['body'][] = t('@name Le envía a usted un mensaje de confirmación del alta de su oferta:', array('@name' => variable_get('site_name', 'Drupal')), $options);
      // Because this is just user-entered text, we do not need to translate it.

      // Since user-entered text may have unintentional HTML entities in it like
      // '<' or '>', we need to make sure these entities are properly escaped,
      // as the body will later be transformed from HTML to text, meaning
      // that a normal use of '<' will result in truncation of the message.
      $message['body'][] = check_plain($params['message']);
      break;
    case 'admin_mail':
		      $message['subject'] = t('Registro de oferta enviado por @user-name', array('@user-name' => $user->name), $options);
		      // Note that the message body is an array, not a string.
		      $message['body'][] = t('Se acaba de crear una nueva oferta con los siguientes datos:', $options);
		      // Because this is just user-entered text, we do not need to translate it.

		      // Since user-entered text may have unintentional HTML entities in it like
		      // '<' or '>', we need to make sure these entities are properly escaped,
		      // as the body will later be transformed from HTML to text, meaning
		      // that a normal use of '<' will result in truncation of the message.
		      $message['body'][] = check_plain($params['message']);
		      break;

	//Se realiza una suscripción	      
     case 'offer_subscriber':
		     $message['subject'] = t('Registro de suscripción enviado por @site-name', array('@site-name' => variable_get('site_name', 'Drupal')), $options);
		      // Note that the message body is an array, not a string.
		      $message['body'][] = t('@name Le envía a usted un mensaje de confirmación del alta de su suscripción a la oferta:', array('@name' => variable_get('site_name', 'Drupal')), $options);
		      // Because this is just user-entered text, we do not need to translate it.

		      // Since user-entered text may have unintentional HTML entities in it like
		      // '<' or '>', we need to make sure these entities are properly escaped,
		      // as the body will later be transformed from HTML to text, meaning
		      // that a normal use of '<' will result in truncation of the message.
		      $message['body'][] = check_plain($params['message']);
		      break;
     break;

     //Se realiza una desuscripción	      
     case 'offer_unsubscriber':
		     $message['subject'] = t('Registro de desuscripción enviado por @site-name', array('@site-name' => variable_get('site_name', 'Drupal')), $options);
		      $message['body'][] = t('@name Le envía a usted un mensaje de confirmación de baja de su suscripción a la oferta:', array('@name' => variable_get('site_name', 'Drupal')), $options);

		      $message['body'][] = check_plain($params['message']);
		      break;
     break;

     case 'unsubscriber_offer_owner':
	      $message['subject'] = t('Registro de desuscripción enviado por @user-name', array('@user-name' => $user->name), $options);
	      // Note that the message body is an array, not a string.
	      $message['body'][] = t('@user-name Se acaba de desuscribir a una de tus ofertas con los siguientes datos:',array('@user-name' => $user->name), $options);
	      // Because this is just user-entered text, we do not need to translate it.

	      // Since user-entered text may have unintentional HTML entities in it like
	      // '<' or '>', we need to make sure these entities are properly escaped,
	      // as the body will later be transformed from HTML to text, meaning
	      // that a normal use of '<' will result in truncation of the message.
	      $message['body'][] = check_plain($params['message']);
     break;

     case 'subscriber_offer_owner':
	      $message['subject'] = t('Registro de suscripción enviado por @user-name', array('@user-name' => $user->name), $options);
	      // Note that the message body is an array, not a string.
	      $message['body'][] = t('@user-name Se acaba de suscribir a una de tus ofertas con los siguientes datos:',array('@user-name' => $user->name), $options);
	      // Because this is just user-entered text, we do not need to translate it.

	      // Since user-entered text may have unintentional HTML entities in it like
	      // '<' or '>', we need to make sure these entities are properly escaped,
	      // as the body will later be transformed from HTML to text, meaning
	      // that a normal use of '<' will result in truncation of the message.
	      $message['body'][] = check_plain($params['message']);
     break;


     //Se finaliza una oferta      
     case 'closed_offer_owner':
		     $message['subject'] = t('Registro de cierre de oferta enviado por @site-name', array('@site-name' => variable_get('site_name', 'Drupal')), $options);
		      // Note that the message body is an array, not a string.
		      $message['body'][] = t('@name Le comunica que una de sus ofertas se ha cerrado con éxito, los de detalles de la misma a continuación:', array('@name' => variable_get('site_name', 'Drupal')), $options);
		      // Because this is just user-entered text, we do not need to translate it.

		      // Since user-entered text may have unintentional HTML entities in it like
		      // '<' or '>', we need to make sure these entities are properly escaped,
		      // as the body will later be transformed from HTML to text, meaning
		      // that a normal use of '<' will result in truncation of the message.
		      $message['body'][] = check_plain($params['message']);
     break;

     //Se finaliza una oferta      
     case 'open_offer_owner':
		     $message['subject'] = t('Registro de apertura de oferta enviado por @site-name', array('@site-name' => variable_get('site_name', 'Drupal')), $options);
		      // Note that the message body is an array, not a string.
		      $message['body'][] = t('@name Le comunica que una de sus ofertas se ha abierto por baja de un suscriptor, los de detalles de la misma a continuación:', array('@name' => variable_get('site_name', 'Drupal')), $options);
		      // Because this is just user-entered text, we do not need to translate it.

		      // Since user-entered text may have unintentional HTML entities in it like
		      // '<' or '>', we need to make sure these entities are properly escaped,
		      // as the body will later be transformed from HTML to text, meaning
		      // that a normal use of '<' will result in truncation of the message.
		      $message['body'][] = check_plain($params['message']);
     break;

     case 'closed_offer_admin_mail':
	      $message['subject'] = t('Registro de cierre de oferta de @user-name', array('@user-name' => $user->name), $options);
	      // Note that the message body is an array, not a string.
	      $message['body'][] = t('Se acaba de cerrar con éxito la siguiente oferta:', $options);
	      // Because this is just user-entered text, we do not need to translate it.

	      // Since user-entered text may have unintentional HTML entities in it like
	      // '<' or '>', we need to make sure these entities are properly escaped,
	      // as the body will later be transformed from HTML to text, meaning
	      // that a normal use of '<' will result in truncation of the message.
	      $message['body'][] = check_plain($params['message']);
     break;

     case 'open_offer_admin_mail':
	      $message['subject'] = t('Registro de apertura de oferta de @user-name', array('@user-name' => $user->name), $options);
	      // Note that the message body is an array, not a string.
	      $message['body'][] = t('Se acaba de abrir siguiente oferta:', $options);
	      // Because this is just user-entered text, we do not need to translate it.

	      // Since user-entered text may have unintentional HTML entities in it like
	      // '<' or '>', we need to make sure these entities are properly escaped,
	      // as the body will later be transformed from HTML to text, meaning
	      // that a normal use of '<' will result in truncation of the message.
	      $message['body'][] = check_plain($params['message']);
     break;
  }
}


/**
 * Sends an e-mail.
 *
 * @param $form_values
 *   An array of values from the contact form fields that were submitted.
 *   There are just two relevant items: $form_values['email'] and
 *   $form_values['message'].
 */
function offers_form_mail_send($id_oferta, $form_values, $operation) {
	global $user;
	global $language, $base_url;
 
 

  	// Email de administración del sitio
	$site_mail = variable_get('site_mail');
	// Email del usuario (indicado en el formulario)
	$user_mail = $user->init;
										
	$form_url = $base_url . '/?q=ofertas/'.$id_oferta.'/user/'.$user->uid.'/detalle/view';

  // Specify 'to' and 'from' addresses.
  $to = $user->init;
  $from = variable_get('site_mail', 'ariel.card@gmail.com');

  // "params" loads in additional context for email content completion in
  // hook_mail(). In this case, we want to pass in the values the user entered
  // into the form, which include the message body in $form_values['message'].
  //$params = $form_values;


  	$params = array();
	$params['subject'] = t('[@site_name] : Alert from offer create', array( '@site_name' => variable_get('site_name', 'Drupal'),
	));
	$params['message'] = "\nNombre Autor:".$form_values['autor_obra'];
	$params['message'] .= "\nObra: ".$form_values['obra_musical'];
	$params['message'] .= "\nCiudad: ".$form_values['city'];
	$params['message'] .= "\nEnlace: ".$form_url;

  // The language of the e-mail. This will one of three values:
  // * user_preferred_language(): Used for sending mail to a particular website
  //   user, so that the mail appears in their preferred language.
  // * global $language: Used when sending a mail back to the user currently
  //   viewing the site. This will send it in the language they're currently
  //   using.
  // * language_default(): Used when sending mail to a pre-existing, 'neutral'
  //   address, such as the system e-mail address, or when you're unsure of the
  //   language preferences of the intended recipient.
  //
  // Since in our case, we are sending a message to a random e-mail address that
  // is not necessarily tied to a user account, we will use the site's default
  // language.
  $language = language_default();

  // Whether or not to automatically send the mail when drupal_mail() is
  // called. This defaults to TRUE, and is normally what you want unless you
  // need to do additional processing before drupal_mail_send() is called.
  $send = TRUE;
  // Send the mail, and check for success. Note that this does not guarantee
  // message delivery; only that there were no PHP-related issues encountered
  // while sending.


 // All system mails need to specify the module and template key (mirrored from
  // hook_mail()) that the message they want to send comes from.
  $module = 'forms_forcontu';
  $key = '';
  $key_admin = '';
  if($operation == 'new_offer'){
 		$key = 'offer_owner';
  		$key_admin = 'admin_mail';
  }
  if($operation == 'subscription'){
  		$key = 'offer_subscriber'; //suscriptor de la oferta
  		$key_admin = 'subscriber_offer_owner'; //propietario de la oferta a la que se han suscrito
  		$site_mail =  $form_values['mail'];
  }
  if($operation == 'unsubscription'){
  		$key = 'offer_unsubscriber'; //suscriptor de la oferta
  		$key_admin = 'unsubscriber_offer_owner'; //propietario de la oferta a la que se han suscrito
  		$site_mail =  $form_values['mail'];
  }
  if($operation == 'close_offer'){
		$key = 'closed_offer_owner';
  		$key_admin = 'closed_offer_admin_mail';
  		$to =  $form_values['mail'];
  }
  if($operation == 'open_offer'){
		$key = 'open_offer_owner';
  		$key_admin = 'open_offer_admin_mail';
  		$to =  $form_values['mail'];
  }

  $result = drupal_mail($module, $key, $to, $language, $params, $from, $send);
  if ($result['result'] == TRUE ) {
	if( $operation != 'close_offer'){
 		drupal_set_message(t('Your message has been sent.'));
	}
  
  }
  else {
    drupal_set_message(t('There was a problem sending your message and it was not sent.'), 'error');
  }

  drupal_mail($module, $key_admin, $site_mail, $language, $params, $from, $send);

}

/**
 * Implement hook_mail_alter().
 *
 * This function is not required to send an email using Drupal's mail system.
 *
 * Hook_mail_alter() provides an interface to alter any aspect of email sent by
 * Drupal. You can use this hook to add a common site footer to all outgoing
 * email, add extra header fields, and/or modify the email in anyway. HTML-izing
 * the outgoing email is one possibility.
 */
function forms_forcontu_mail_alter(&$message) {

  $options = array(
    'langcode' => $message['language']->language,
  );

  $signature = t("\n--\nCorreo enviado por el equipo de Piano y Mengano.", array(), $options);
  if (is_array($message['body'])) {
    $message['body'][] = $signature;
  }
  else {  // Some modules use the body as a string, erroneously.
    $message['body'] .= $signature;
  }
}

function forms_ofertas_detalle_edit($form, &$form_state, $account, $category = 'account') {
//function forms_ofertas_detalle_edit($form,&$form_state) {
	  global $user;
	  $options = obtiene_instrumentos();

  // During initial form build, add the entity to the form state for use during
  // form building and processing. During a rebuild, use what is in the form
  // state.
  if (!isset($form_state['user'])) {
    $form_state['user'] = $account;
  }
  else {
    $account = $form_state['user'];
  }

  // @todo Legacy support. Modules are encouraged to access the entity using
  //   $form_state. Remove in Drupal 8.
  $form['#user'] = $account;
  $form['#user_category'] = $category;

 	$operacion = '';

	$id = $form_state['build_info']['args'][0];
		
	global $user;
	$form['nid_oferta'] = array(
		'#type' => 'hidden',
		'#title' => t('Oferta'),
		'#value' => $id,
	);

	$dbOferta = new DbOffer();
	$oferta = $dbOferta->get($id);

	//opciones que estarán checkeadas a TRUE
	$options_checked = array('11','21','31');
	

	$form['personal_data'] = array(
	'#type' => 'fieldset',
	'#title' => t('Datos de la oferta. Creado: <strong> '.date('d-M-Y', $oferta->getFechaCreacion()).'</strong>'),
	 
	'#collapsible' => TRUE,
	'#collapsed' => FALSE,
	);
	$form['personal_data']['mail'] = array(
		'#type' => 'hidden',
		'#default_value' => $oferta->getUser_mail(),
	);
	$form['personal_data']['creador_oferta'] = array(
		'#type' => 'textfield',
		'#title' => t('Creador de la oferta'),
		'#default_value' => $oferta->getUser_name(),
		'#required' => TRUE,
	);
	$form['personal_data']['obra_musical'] = array(
		'#type' => 'textfield',
		'#title' => t('Obra a tocar'),
		'#default_value' => $oferta->getObra_musical(),
		'#required' => TRUE,
	);
	$form['personal_data']['autor_obra'] = array(
		'#type' => 'textfield',
		'#title' => t('Autor de la Obra'),
		'#default_value' => $oferta->getAutor_obra(),
		'#required' => TRUE,
	);
	$form['personal_data']['autor_instrumet'] = array(
		'#type' => 'select',
		'#title' => t('Instrument to play by the author'),
		'#required' => TRUE,
		'#options' => $options,
		'#value' => $oferta->getInstrumento_autor(),
        '#empty' => t('No content available.'),
	);	
	$form['personal_data']['Salom'] = array(
		'#type' => 'checkbox',
		'#title' => t('Se necesita Salon'),
		'#default_value' => ($oferta->getSalon()==0)?0:1,
	);
	/*$form['personal_data']['Piano'] = array(
		'#type' => 'checkbox',
		'#title' => t('Se necesita Piano'),
		'#default_value' => ($oferta->getPiano()==0)?0:1,
	);*/
	$form['personal_data']['Piano'] = array(
		'#type' => 'checkbox',
		'#title' => t('Se necesita Piano'),
		//'#options' => array( '1' => t('<strong>Do you need piano?</strong>')),
		// Only show this field if persons is set to 'Other'.
		'#default_value' => ($oferta->getPiano()==0)?0:1,
	    '#states' => array(
	      'visible' => array(  // Action to take: Make visible.
	        ':input[name="Salom"]' => array('checked' => TRUE),
	      ),
    ),


	);
	$form['personal_data']['Ciudad'] = array(
		'#type' => 'textfield',
		'#title' => t('City to play'),
		'#default_value' => $oferta->getCiudad(),
		'#required' => TRUE,
	);
	$form['personal_data']['Disponibilidad'] = array(
		'#type' => 'textfield',
		'#title'=> t('Availability'),
		'#default_value' => $oferta->getDisponibilidad(),
		//'#collapsed' => FALSE,
	);

	$form['instruments']= array(
		'#type' => 'fieldset',
		'#title'=> t('Instruments'),
		'#collapsible' => TRUE,
		'#collapsed' => FALSE,
		'#description' => t('Select the instrument wich you want to suscribe to.'),
	);

	
	$header = array(
		'Instrumento' => array('data' => t('Instrumento'), 'field' => 'i.name_instrument'),
		'Suscriptor' => array('data' => t('Suscriptor'), 'field' => 'u.name'),
		'Activo' => array('data' => t('Estado'), 'field' => 'io.position'),
	
	);
	$instrumentos = db_select('pym_instrumentos_ofertas', 'io')
			->fields('io', array('nid_oferta', 'nid_instrument', 'uid','position'))
			->condition('nid_oferta', $id,'=');
			//->condition('activo', 1,'=');
	$instrumentos->addField('u', 'name', 'name');
	$instrumentos->addField('i', 'name_instrument', 'name_instrument');
	$instrumentos->leftJoin('users', 'u', 'io.uid = u.uid ');
	$instrumentos->leftJoin('instruments', 'i', 'io.nid_instrument = i.nid_instrument ');
	//defino una línea de instrumento 
  	$entries = $instrumentos->execute()->fetchAll();

	//Instrumentos seleccionados por el usuario actual
	$instrumentos_usuario = db_select('pym_instrumentos_ofertas', 'io')
			//->fields('io', array('uid'))
			->condition('nid_oferta', $id,'=')
			->condition('uid', $user->uid,'=');

	$instrumentos_usuario->addExpression('COUNT(uid)', 'uid_count');
	
	$ii = $instrumentos_usuario->execute()->fetchObject();
	//Se activa con la primera aparición del nombre en la lista de suscriptos
	if($ii->uid_count>0) {
		$booleanSuscripcion = TRUE;
		drupal_set_message('You are already subscribed to this offer. You havent got permission to select another one');
	}
	else
	{
		$booleanSuscripcion = FALSE;
	}



	$options = array();
	$optout = array();

	
	    foreach ($entries as $entry) {
	      $key = $entry->nid_instrument.'-'.$entry->nid_oferta.$entry->position;
        
	      if(evaluaCondiciones($entry,$user,$oferta) || $booleanSuscripcion)$optout[$key] = TRUE;
	      $options[$key] = array(

						'Instrumento' => check_plain($entry->name_instrument),
						'Suscriptor' => array(
									'data' => array(
									'#type' => 'link',
									'#title' => $entry->name,
									'#href' => 'user/' . $entry->uid,
									),
						),
						'Activo' => (empty($entry->name))?'Si':'No',
						);
	    }
	 

	$form['instruments']['instruments'] = array(
		'#type' => 'tableselect',
		'#header' => $header,
		'#options' => $options,
		'#empty' => t('No tiene contenido.'),
		'#multiple' => FALSE,
		'#required' => TRUE,
	);

	foreach( $optout as $key => $value )
	{
	  $form['instruments']['instruments'][$key]['#disabled'] = true;
	}
 	


 	//if(empty($optout)){
	 	//botones
		$form['actions'] = array('#type' => 'actions');
		$form['actions']['submit'] = array(
			'#type' => 'submit',
			'#value' => t('Save'),
			//'#attributes' => array('onclick' => 'if(!confirm("Really want to subscribe?")){return false;}')
		);
	//}

  	$form['#multistep'] = FALSE;
  	$form['#action'] = url('ofertas/edit/detalle/confirm');
  	return $form;

}

function forms_ofertas_detalle_edit_confirm($form, &$form_state){
		$edit = $_POST;
	//dpm($edit);
	$offer = new Offer();
	$offer->setObra_musical($edit['obra_musical']);
    $offer->setAutor_obra($edit['autor_obra']);
    $offer->setKey($edit['nid_oferta']);
    //$offer->setSalon($edit['Salom']);
    (!empty($edit['Salom']))?$offer->setSalon($edit['Salom']):$offer->setSalon(0);
    (!empty($edit['Piano']))?$offer->setPiano($edit['Piano']):$offer->setPiano(0);
    //($oferta->getSalon()==0)?'No':'Si',
    //$offer->setUser_name($edit->name);
    $offer->setCiudad($edit['Ciudad']);
    $offer->setInstrumento_autor($edit['autor_instrumet']);
    $offer->setDisponibilidad($edit['Disponibilidad']);
    //$offer->setActivo($result->activo);
    //dpm($offer->toArray());
	
	$transaction = db_transaction();
	$db = new DbOffer();
    try{
    	$db->set($offer);
    }
    catch (Exception $e) {
			   $transaction->rollback();
			    watchdog_exception('my_type', $e);
			    drupal_set_message ("<strong>Hubo un problema en el registro de su oferta, por favor inténtelo más tarde.</br>".$e->getMessage()."</strong> ");
			}
	drupal_set_message(t('Update confirmed.'));	
	drupal_goto($_SERVER['HTTP_REFERER']);

	
}

/*  DETALLE DE LA OFERTA */
function forms_ofertas_detalle($form,&$form_state) {
	global $user;
if(!isset($form_state['storage']['confirm'])) {	
	$operacion = '';
	global $user; 
	$id = $form_state['build_info']['args'][0];
		
	global $user;
	$form['nid_oferta'] = array(
		'#type' => 'hidden',
		'#title' => t('Oferta'),
		'#value' => $id,
	);


	$dbOferta = new DbOffer();
	$oferta = $dbOferta->get($id);

	
	//opciones que estarán checkeadas a TRUE
	$options_checked = array('11','21','31');

	$form['personal_data'] = array(
	'#type' => 'fieldset',
	'#title' => t('Datos de la oferta. Creado: <strong> '.date('d-M-Y', $oferta->getFechaCreacion()).'</strong>'),
	'#collapsible' => TRUE,
	'#collapsed' => FALSE,
	);
	$form['personal_data']['mail'] = array(
		'#type' => 'hidden',
		'#default_value' => $oferta->getUser_mail(),
	);
	$form['personal_data']['a_oferta'] = array(
		'#type' => 'item',
		'#title' => t('Autor de la oferta'),
		'#markup' => t('!url', array('!url' => l(t($oferta->getUser_name()), "user/".$oferta->getUid()))),
	);
	$form['personal_data']['autor_oferta'] = array(
		'#type' => 'hidden',
		'#default_value' => $oferta->getUid(),
	);	
	$form['personal_data']['o_musical'] = array(
		'#type' => 'item',
		'#title' => t('Obra a tocar'),
		'#markup' => $oferta->getUser_mail(),
	);
	$form['personal_data']['obra_musical'] = array(
		'#type' => 'hidden',
		'#default_value' => $oferta->getObra_musical(),
	);
	$form['personal_data']['a_obra'] = array(
		'#type' => 'item',
		'#title' => t('Autor de la Obra'),
		'#markup' => $oferta->getAutor_obra(),
	);

	$form['personal_data']['autor_obra'] = array(
		'#type' => 'hidden',
		'#default_value' => $oferta->getAutor_obra(),
	);
	$dbInstrument = new DbInstrument();
	$inst = $dbInstrument->get($oferta->getInstrumento_autor());
	$form['personal_data']['a_instrumet'] = array(
		'#type' => 'item',
		'#title' => t('Instrument to play by the author:'),
		'#markup' => $inst->getName_instrument(),
		
	);
	$form['personal_data']['autor_instrumet'] = array(
		'#type' => 'hidden',
		'#default_value' => $oferta->getInstrumento_autor(),
		
	);	
	$form['personal_data']['Salon'] = array(
		'#type' => 'item',
		'#title' => t('Se necesita Salon'),
		'#markup' => ($oferta->getSalon()==0)?'No':'Si',
	);
	$form['personal_data']['Piano'] = array(
		'#type' => 'item',
		'#title' => t('Se necesita Piano'),
		'#markup' => ($oferta->getPiano()==0)?'No':'Si',
	);
	$form['personal_data']['Ciudad'] = array(
		'#type' => 'item',
		'#title' => t('City to play:'),
		'#markup' => ($oferta->getCiudad()),

	);
	$form['personal_data']['city'] = array(
		'#type' => 'hidden',
		'#default_value' => $oferta->getCiudad(),

	);
	$form['personal_data']['Disponibilidad'] = array(
		'#type' => 'item',
		'#title'=> t('Availability'),
		'#markup' => ($oferta->getDisponibilidad()),
		
	);

		
		
	$form['instruments']= array(
		'#type' => 'fieldset',
		'#title'=> t('Instruments'),
		'#collapsible' => TRUE,
		'#collapsed' => FALSE,
		'#description' => t('Select the instrument wich you want to suscribe to.'),
	);

	
	$header = array(
	'Instrumento' => array('data' => t('Instrumento'), 'field' => 'i.name_instrument'),
	'Suscriptor' => array('data' => t('Suscriptor'), 'field' => 'u.name'),
	'Estado' => array('data' => t('Estado'), 'field' => 'io.position'),
	
	);
	
  	$dbOfferInstrument = new DbOfferInstrument();
  	$entries = $dbOfferInstrument->getInstruments($id);


	//Instrumentos seleccionados por el usuario actual
	$instrumentos_usuario = db_select('pym_instrumentos_ofertas', 'io')
			->condition('nid_oferta', $id,'=')
			->condition('uid', $user->uid,'=');

	$instrumentos_usuario->addExpression('COUNT(uid)', 'uid_count');
	
	$ii = $instrumentos_usuario->execute()->fetchObject();
	//Se activa con la primera aparición del nombre en la lista de suscriptos
	if($ii->uid_count>0) {
		$booleanSuscripcion = TRUE;
		drupal_set_message('You are already subscribed to this offer. You havent got permission to select another one');
		/*$form['instruments']['booleanSuscripcion'] = array(
	    	'#type' => 'hidden',
	    	'#default_value' => 1, 
	  	);*/
	}
	else
	{
		$booleanSuscripcion = FALSE;
		
			$form['instruments']['booleanSuscripcion'] = array(
	    	'#type' => 'hidden',
	    	'#default_value' => 1, 
	  	);
			
	}

	$options = array();
	$optout = array();
	//dpm($contador);
	    foreach ($entries as $entry) {
	      $key = $entry->getNid_instrument().'-'.$entry->getNid_oferta().$entry->getPosition();
        
	      $user_name = $entry->getUser_name();
	      if(evaluaCondiciones($entry,$user,$oferta) || $booleanSuscripcion)$optout[$key] = TRUE;
	      $options[$key] = array(

						'Instrumento' => check_plain($entry->getName_instrument()),
						'Suscriptor' => array(
									'data' => array(
									'#type' => 'link',
									'#title' => $user_name,
									'#href' => 'user/' . $entry->getUid(),
									),
						),
						'Estado' => (empty($user_name))?'Abierto':'Cerrado',
						);
	    }
	 

	$form['instruments']['instruments'] = array(
		'#type' => 'tableselect',
		'#header' => $header,
		'#options' => $options,
		'#empty' => t('No tiene contenido.'),
		'#multiple' => FALSE,
		'#required' => TRUE,
		'#validated' => TRUE,
	);


	foreach( $optout as $key => $value )
	{
	  $form['instruments']['instruments'][$key]['#disabled'] = true;

	}
 
 	if($booleanSuscripcion ){
	 	//botones
		$form['actions'] = array('#type' => 'actions');
		$form['actions']['submit'] = array(
			'#type' => 'submit',
			'#value' => t('Unsubscribe'),
			//'#attributes' => array('onclick' => 'if(!confirm("Really want to subscribe?")){return false;}')
		);

	}
	else{
		//botones
		$form['actions'] = array('#type' => 'actions');
		$form['actions']['submit'] = array(
			'#type' => 'submit',
			'#value' => t('Subscribe'),
			//'#attributes' => array('onclick' => 'if(!confirm("Really want to subscribe?")){return false;}')
		);
	}


  	//$form['#validate'] = TRUE;
  	//$form['#action'] = url('ofertas/ver/detalle/confirm');
  	return $form;
}
else {
	$text_info = '';
  	$text_button ='';
  	$text_owner='';
	 if(!empty($form_state['values']['instruments'])){
	  	 
		  $text_info = 'Do you want to subscribe to this offer?';
		//dpm($edit['instruments']);
		  $text_button ='Subscribe';
	  }
	  if(empty($form_state['values']['instruments'])){
	  	$text_info = 'Do you wish to unsubscribe from this offer?';
	  	$text_button ='Unsubscribe';
	  	$form['values']['unsubscribe'] = array(
	    	'#type' => 'hidden',
	    	'#value' => 1 // Include the $_POST form values
	  	);

	  	if($form_state['values']['autor_oferta']==$user->uid){
	  		$text_owner = 'You are the owner of this offer but if you want to unsubscribe it will keep open';
	  	}
	  }
	

	  

	  $form = fill_form($form_state);
	  return confirm_form($form,
	    				t($text_info), 
	    				$_SERVER['HTTP_REFERER'],
	    				(empty($text_owner))?t('Only do this if you are sure!'):$text_owner,
	    				t($text_button),
	    				t('Cancel'));
    /*return confirm_form($form,'Are you sure you wish to continue?',
    					$_SERVER['HTTP_REFERER'],
    					'Proceed with caution',
    					'Yes, proceed','Cancel');*/
  }
}
/**
* Evalua si el usuario actual puede efectuar una suscripción a la oferta
* $entry: datos del instrumento de la oferta
* $user: usuario actual
* $record: datos de la oferta
*/
function evaluaCondiciones($entry,$user,$record){
	//Si el instrumento ya tiene suscriptor
	if (!empty($entry->name))return true;
	//Si el usuario es el propietario de la oferta no podrá seleccionar un instrumento
	//if ($record->getUid() == $user->uid) return true;


	return false;
}

/**
* Implements hook_validate().
*/
function forms_ofertas_detalle_validate($form, &$form_state){
//dpm($form_state);
	if(!isset($form_state['storage']['confirm']))
  	{
		if(empty($form_state['values']['instruments']) && isset($form_state['values']['booleanSuscripcion'])){
			
				form_set_error('Instrumentos', t('You must select least one instrument.'));
			
		}
	}
}


function forms_ofertas_detalle_submit($form, &$form_state) {
	

	if(!isset($form_state['storage']['confirm']))
    {
    	
      $form_state['storage']['confirm'] = TRUE; // this will cause the form to be rebuilt, entering the confirm part of the form
      $form_state['rebuild'] = TRUE; // along with this
    }
    else
    {
      // this is where you do your processing after they have pressed the confirm button
    	global $user; 
	$transaction = db_transaction();
	try{
		$dbOfferInstrument = new DbOfferInstrument();
		if($form_state['values']['op']=='Unsubscribe'){
			$dbOfferInstrument->delete($user->uid,$form_state['values']['nid_oferta']);
		
			offers_form_mail_send($form_state['values']['nid_oferta'], $form_state['values'], 'unsubscription');
			drupal_set_message('You have successfully unsubscribed.');
			//Comprobamos si la oferta está completa
			if(!is_complete($form_state['values']['nid_oferta'])){
				db_update('pym_ofertas')
					->fields(array( 'activo'=>1,))
					->condition('nid_oferta', $form_state['values']['nid_oferta'],'=')
					->execute();
			}
			//Además, si el usuario actual es el propietario se eliminará el instrumento de autor
			if ($user->uid==$form_state['values']['autor_oferta']) {
				$dbOffer = new DbOffer();
				$dbOffer->deleteAutor_instrument($form_state['values']['nid_oferta']);
			}
			//mails de cierre de oferta
			offers_form_mail_send($form_state['values']['nid_oferta'], $form_state['values'], 'open_offer');

		}
		else{
			
			$dbOfferInstrument->update($user->uid,$form_state['values']['nid_oferta'],$form_state['values']['instruments']);
		
			offers_form_mail_send($form_state['values']['nid_oferta'], $form_state['values'], 'subscription');
			drupal_set_message('You have successfully subscribed.');
		
			//Comprobamos si la oferta está completa
			if(is_complete($form_state['values']['nid_oferta'])){
				db_update('pym_ofertas')
					->fields(array( 'activo'=>0,))
					->condition('nid_oferta', $form_state['values']['nid_oferta'],'=')
					->execute();
			}

			//mails de cierre de oferta
			offers_form_mail_send($form_state['values']['nid_oferta'], $form_state['values'], 'close_offer');
		}

		
		drupal_goto("listado/ofertas");
	}
	catch (PDOException $e) {
		$transaction->rollback();
      	watchdog_exception('user', $e);
  		drupal_set_message(t('Error: %message', array('%message' => $e->getMessage())), 'error');
  		 drupal_goto($_SERVER['HTTP_REFERER']);
	}
    }
}

function fill_form($form_state){

	global $user;
	// Get the post values (what user entered)
  

  $form = array();

 $form['autor_obra'] = array(
    '#type' => 'hidden',
    '#value' => $form_state['values']['autor_obra']
  );
  $form['obra_musical'] = array(
    '#type' => 'hidden',
    '#value' => $form_state['values']['obra_musical']
  );
  $form['autor_oferta'] = array(
    '#type' => 'hidden',
    '#value' => $form_state['values']['autor_oferta']
  );
  $form['city'] = array(
    '#type' => 'hidden',
    '#value' => $form_state['values']['city'] 
  );
   $form['mail'] = array(
    '#type' => 'hidden',
    '#value' => $form_state['values']['mail'] 
  );
	$form['nid_oferta'] = array(
	    '#type' => 'hidden',
	    '#value' => $form_state['values']['nid_oferta'] // Include the $_POST form values
	  	);
   if(!empty($form_state['values']['autor_instrumet'])){
	   	$form['autor_instrumet'] = array(
	    '#type' => 'hidden',
	    '#value' => $form_state['values']['autor_instrumet'] 
	  	);
   }
   
 
 if(!empty($form_state['values']['instruments'])){
  	  $num = preg_split("/\/|-/",$form_state['values']['instruments']);

	  $form['instruments'] = array(
	    '#type' => 'hidden',
	    '#value' => $num[0] // Include the $_POST form values
	  );
	  
  }/*
  if(empty($edit['instruments'])){
  	$text_info = 'Do you wish to unsubscribe from this offer?';
  	$text_button ='Unsubscribe';
  }

  if(empty($edit['instruments']) && $edit['op'] =='Actualizar'){
  	$text_info = 'Do you wish to update this offer?';
  	$text_button ='';
  }
	$form['nid_oferta'] = array(
    '#type' => 'hidden',
    '#value' => $edit['nid_oferta'] // Include the $_POST form values
  	);

  if($edit['autor_oferta']==$user->uid){
  	$text_owner = 'You are the owner of this offer but if you want to unsubscribe it will keep open';
  }
  $form= confirm_form($form,
	    t($text_info), $_SERVER['HTTP_REFERER'],
	    (empty($text_owner))?t('Only do this if you are sure!'):$text_owner,
	    t($text_button),
	    t('Cancel')
  );*/

  return $form;
}
/**
* Implements hook_validate().
*/
function forms_ofertas_detalle_confirm_validate($form, &$form_state) {
	form_set_error('lista', t('You must enter a valid e-mail address.'));

}
//Se envía la suscripción a una oferta
function forms_ofertas_detalle_confirm_submit($form, &$form_state) {
	global $user; 
	dpm($form_state);
	$transaction = db_transaction();
	try{
		$dbOfferInstrument = new DbOfferInstrument();
		if($form_state['values']['op']=='Unsubscribe'){
			$dbOfferInstrument->delete($user->uid,$form_state['values']['nid_oferta']);
		
			offers_form_mail_send($form_state['values']['nid_oferta'], $form_state['values'], 'unsubscription');
			drupal_set_message('You have successfully unsubscribed.');
			//Comprobamos si la oferta está completa
			if(!is_complete($form_state['values']['nid_oferta'])){
				db_update('pym_ofertas')
					->fields(array( 'activo'=>1,))
					->condition('nid_oferta', $form_state['values']['nid_oferta'],'=')
					->execute();
			}
			//Además, si el usuario actual es el propietario se eliminará el instrumento de autor
			if ($user->uid==$form_state['values']['autor_oferta']) {
				$dbOffer = new DbOffer();
				$dbOffer->deleteAutor_instrument($form_state['values']['nid_oferta']);
			}
			//mails de cierre de oferta
			offers_form_mail_send($form_state['values']['nid_oferta'], $form_state['values'], 'open_offer');

		}
		else{
			
			$dbOfferInstrument->update($user->uid,$form_state['values']['nid_oferta'],$form_state['values']['instruments']);
		
			offers_form_mail_send($form_state['values']['nid_oferta'], $form_state['values'], 'subscription');
			drupal_set_message('You have successfully subscribed.');
		
			//Comprobamos si la oferta está completa
			if(is_complete($form_state['values']['nid_oferta'])){
				db_update('pym_ofertas')
					->fields(array( 'activo'=>0,))
					->condition('nid_oferta', $form_state['values']['nid_oferta'],'=')
					->execute();
			}

			//mails de cierre de oferta
			offers_form_mail_send($form_state['values']['nid_oferta'], $form_state['values'], 'close_offer');
		}

		
		drupal_goto("listado/ofertas");
	}
	catch (PDOException $e) {
		$transaction->rollback();
      	watchdog_exception('user', $e);
  		drupal_set_message(t('Error: %message', array('%message' => $e->getMessage())), 'error');
  		 drupal_goto($_SERVER['HTTP_REFERER']);
	}
	 



}

//comprobamos si es la ultima suscripción para esa oferta
function is_complete($id){

		
	$instrumentos_usuario = db_select('pym_instrumentos_ofertas', 'io')
			//->fields('io', array('uid'))
			->condition('nid_oferta', $id,'=')
			->condition('uid', 0,'=');

	$instrumentos_usuario->addExpression('COUNT(nid_oferta)', 'nid_oferta');
	
	$ii = $instrumentos_usuario->execute()->fetchObject();
	//Se activa con la primera aparición del nombre en la lista de suscriptos
	if($ii->nid_oferta>0) {
		return false;
	}
	return true;
}

/**
* Se expone el listado de ofertas realizadas por el usuario
*
*/
function forms_ofertas_listado_ofertas_usuario($id='') {

	$output = '';
	$header = array(
		'created' => array('data' => t('Creado'), 'field' => 'fecha_creacion','sort' => 'asc'),
		'Music piece' => array('data' => t('Music piece'), 'field' => 'obra_musical'),
		'Author Obra' => array('data' => t('Author'), 'field' => 'name'),
		'Ciudad' => array('data' => t('City'), 'field' => 'ciudad'),
		'Activo' => array('data' => t('Estado'), 'field' => 'activo','sort' => 'asc'),
	);

	$query = db_select('pym_ofertas', 'pym');
	//$query->range(0, 10);
	// Obtiene los datos de la base de datos (tabla node).
	$query->fields('pym',array('nid_oferta','fecha_creacion','autor_obra','obra_musical','ciudad','activo'))
				->condition('u.uid', $id,'=');
	$query->join('users', 'u', 'u.uid = pym.uid');
	      

	$query = $query->extend('PagerDefault')->limit(20); // line1
	$query = $query->extend('TableSort');
	$offers = $query->orderByHeader($header)->execute()->fetchAll();
	$options = array();




  if (!empty($offers)) {
    $rows = array();
    foreach ($offers as $entry) {
      // Sanitize the data before handing it off to the theme layer.

    	$row = array(
			'created' => date('d-M-Y', $entry->fecha_creacion),
			'Music piece' => array(
							'data' => array(
										'#type' => 'link',
										'#title' => $entry->obra_musical,
										'#href' => 'ofertas/'.$entry->nid_oferta.'/user/'.$id.'/detalle/view' ,
										'#options' => $options,
										),
									),
			
			
			'Author Oferta' => $entry->autor_obra,
			'Ciudad' => $entry->ciudad,
			//'Estado' => $entry->activo,
			'Estado' => (empty($entry->activo))?'cerrada':'abierta',

		);
      $rows[] = $row;
    }
    // Make a table for them.
    //$header = array(t('created'), t('Music piece'), t('Offer Author'),t('Estado'));
    $output .= theme('table', array('header' => $header, 'rows' => $rows));
     $output .= theme('pager');
  }
  else {
    drupal_set_message(t('No se han encontrado ofertas realizadas'));
  }

return $output;
}


/**
* Listado de suscripciones del usuario
*
*
*/
function forms_ofertas_listado_suscripciones_usuario($form_state) {
	global $user;
	$id = $user->uid;
	$output = '';
	$header = array(
		'created' => array('data' => t('Creado'), 'field' => 'fecha_creacion','sort' => 'asc'),
		'Music piece' => array('data' => t('Music piece'), 'field' => 'obra_musical'),
		'Author Obra' => array('data' => t('Offer Author'), 'field' => 'name'),
		'Ciudad' => array('data' => t('City'), 'field' => 'ciudad'),
		'Activo' => array('data' => t('Estado'), 'field' => 'activo','sort' => 'asc'),
	);

	$suscripciones = db_select('pym_instrumentos_ofertas', 'pym_io');
	$suscripciones->fields('pym',array('nid_oferta', 'uid'))
					->condition('pym_io.uid', $id,'=');
    $suscripciones->addField('pym', 'nid_oferta');
    $suscripciones->addField('pym', 'fecha_creacion');
    $suscripciones->addField('pym', 'autor_obra');
    $suscripciones->addField('pym', 'obra_musical');
    $suscripciones->addField('pym', 'ciudad');
    $suscripciones->addField('pym', 'activo');
	$suscripciones->leftJoin('pym_ofertas', 'pym', 'pym_io.nid_oferta = pym.nid_oferta');


	$suscripciones = $suscripciones->extend('PagerDefault')->limit(20); // line1
	$suscripciones = $suscripciones->extend('TableSort');
	$offers = $suscripciones->orderByHeader($header)->execute()->fetchAll();
	$options = array();

/*
	$query = db_select('pym_ofertas', 'pym');
	//$query->range(0, 10);
	// Obtiene los datos de la base de datos (tabla node).
	$query->fields('pym',array('nid_oferta','fecha_creacion','autor_obra','obra_musical','activo'))
	//$query->join('users', 'u', 'u.uid = pym.uid');
	->condition('uid', $id,'=');
	
	//$query->addField('u', 'name');
	//$query->addField('u', 'uid');
	//$query->leftJoin('users', 'u', 'u.uid = pym.uid');
	$query = $query->extend('PagerDefault')->limit(20); // line1
	$query = $query->extend('TableSort');
	$offers = $query->orderByHeader($header)->execute()->fetchAll();
	$options = array();
*/



  if (!empty($offers)) {
    $rows = array();
    foreach ($offers as $entry) {
      // Sanitize the data before handing it off to the theme layer.

    	$row = array(
			'created' => date('d-M-Y', $entry->fecha_creacion),
			'Music piece' => array(
							'data' => array(
										'#type' => 'link',
										'#title' => $entry->obra_musical,
										
										'#href' => 'ofertas/'.$entry->nid_oferta.'/user/'.$id.'/detalle/view' ,
										'#options' => $options,
										),
									),
			
			
			'Author Oferta' => $entry->autor_obra,
			'Ciudad' => $entry->ciudad,
			//'Estado' => $entry->activo,
			'Estado' => (empty($entry->activo))?'cerrada':'abierta',

		);
      $rows[] = $row;
    }
    // Make a table for them.
    //$header = array(t('created'), t('Music piece'), t('Offer Author'),t('Estado'));
    $output .= theme('table', array('header' => $header, 'rows' => $rows));
     $output .= theme('pager');
  }
  else {
    drupal_set_message(t('No se han encontrado ofertas'));
  }

return $output;
}
/**
* Función de retorno para la página de listado de ofertas.
*/
function forms_ofertas_listado($form_state) {
	
 	$output = '';
	$header = array(
	'created' => array('data' => t('Creado'), 'field' => 'fecha_creacion','sort' => 'asc'),
	'Music piece' => array('data' => t('Music piece'), 'field' => 'obra_musical'),
	'Author Oferta' => array('data' => t('Author Oferta'), 'field' => 'name'),
	'Ciudad' => array('data' => t('City'), 'field' => 'ciudad'),

	'Activo' => array('data' => t('Estado'), 'field' => 'activo','sort' => 'asc'),
	);

	$query = db_select('pym_ofertas', 'pym');
	//$query->range(0, 10);
	// Obtiene los datos de la base de datos (tabla node).
	$query->fields('pym',array('nid_oferta','fecha_creacion','autor_obra','obra_musical','ciudad','activo'));
	//$query->join('users', 'u', 'u.uid = pym.uid');
	$query->addField('u', 'name');
	$query->addField('u', 'uid');
	$query->leftJoin('users', 'u', 'u.uid = pym.uid');
	$query = $query->extend('PagerDefault')->limit(20); // line1
	$query = $query->extend('TableSort');
	$offers = $query->orderByHeader($header)->execute()->fetchAll();
	$options = array();




  if (!empty($offers)) {
    $rows = array();
    foreach ($offers as $entry) {
 
    	$row = array(
			'created' => date('d-M-Y', $entry->fecha_creacion),
			'Music piece' => array(
							'data' => array(
										'#type' => 'link',
										'#title' => $entry->obra_musical,
										
										'#href' => 'ofertas/'.$entry->nid_oferta.'/user/'.$entry->uid.'/detalle/view' ,
										'#options' => $options,
										),
									),
			
			'Author Oferta' => array(
							'data' => array(
										'#type' => 'link',
										'#title' => $entry->name,
										'#href' => 'user/' . $entry->uid,
										'#options' => $options,
										),
									),
			//'Author Oferta' => $entry->name,
			//'Estado' => $entry->activo,
			'Ciudad' => $entry->ciudad,	
			'Estado' => (empty($entry->activo))?'cerrada':'abierta',

		);
      $rows[] = $row;
    }
    // Make a table for them.
    //$header = array(t('created'), t('Music piece'), t('Offer Author'),t('Estado'));
    $output .= theme('table', array('header' => $header, 'rows' => $rows));
     $output .= theme('pager');
  }
  else {
    drupal_set_message(t('No se han encontrado ofertas'));
  }

return $output;
}
/**
 * Implements hook_help().
 *
 * Show a bit of information about this module on the example page
 */
function forms_forcontu_help($path, $arg) {
global $user;
  switch ($path) {
    case 'ofertas/listado':
      return '<p>' . t('Offers list You can click on each one to acces to its details .') . '</p>';
     case 'formulario/oferta':
      return '<p>' . t('Se podrán ver las ofertas realizadas por usted. Los campos con asteriscos (*) son obligatorios .') . '</p>';
  }
}

/*function forms_forcontu_menu_alter(&$items) {
  $items['ofertas/%/detalle/edit']['access callback'] = 'ofertas_user_edit_access';
}*/
/**
* Access callback for user account editing.
 *
 */
function ofertas_user_edit_access($account) {
	//drupal_set_message(t($account->uid));

	//dpm($GLOBALS['user']);
	drupal_set_message(t($GLOBALS['user']->uid));
	return TRUE;
	
  //return ((($GLOBALS['user']->uid == $user->uid) && user_access('update offers')) || user_access('administer users')) && $user->uid > 0;
}